 @page "/production/issue"
@inject IDialogService DialogService
<PageTitle>Issuance</PageTitle>
<MudTabs Elevation="2"  KeepPanelsAlive  Color="Color.Dark" Rounded="true" Centered=true PanelClass="my-4 text-center">
 <MudTabPanel Text="Issuance" Class="font-weight-bold text-center">
     <MudGrid>
    <MudItem xs="12">
        <MudCard Elevation="2">
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12"  sm="4">
                        <MudDatePicker Date="IssueDate" DateFormat="dd MMM yyyy"  Margin="Margin.Dense" Label="Issue Date" Variant=Variant.Outlined ReadOnly />
                    </MudItem>
                    <MudItem xs="12" sm="4">
                         <MudAutocomplete T="string" Label="Product Line" SearchFunc="@Search1" ShowProgressIndicator="true"  Variant="Variant.Outlined"  Margin="Margin.Dense" Dense=true
                           AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Default" Required RequiredError="Please select product line..."   ResetValueOnEmptyText=true >
                            <ProgressIndicatorTemplate>
                                <MudProgressLinear Size="Size.Small" Indeterminate="true" Color="Color.Error" />
                            </ProgressIndicatorTemplate>
                        </MudAutocomplete>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                           <MudAutocomplete T="string" Label="Order" SearchFunc="@Search1" ShowProgressIndicator="true"  Variant="Variant.Outlined"  Margin="Margin.Dense" Dense=true
                           AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Default" Required RequiredError="Please select order..."   ResetValueOnEmptyText=true >
                            <ProgressIndicatorTemplate>
                                <MudProgressLinear Size="Size.Small" Indeterminate="true" Color="Color.Error" />
                            </ProgressIndicatorTemplate>
                        </MudAutocomplete>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                           <MudAutocomplete T="string" Label="Article" SearchFunc="@Search1" ShowProgressIndicator="true"  Variant="Variant.Outlined"  Margin="Margin.Dense" Dense=true
                           AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Default" Required RequiredError="Please select article..."   ResetValueOnEmptyText=true >
                            <ProgressIndicatorTemplate>
                                <MudProgressLinear Size="Size.Small" Indeterminate="true" Color="Color.Error" />
                            </ProgressIndicatorTemplate>
                        </MudAutocomplete>
                    </MudItem>
                    <MudDivider />

                    <MudItem xs="12" sm="4">
                 <MudSelect @bind-Value="IssueFromProcess" Margin="Margin.Dense" AnchorOrigin=Origin.BottomCenter T="string" Label="From Process" Variant="Variant.Outlined" Clearable=true Required RequiredError="Select from process...">
                                     <MudSelectItem Value="@("Tyrannosaur")" />
                                     <MudSelectItem Value="@("Triceratops")" />
                                     <MudSelectItem Value="@("Henon Rex")" />
                                 </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="4">
                          <MudSelect @bind-Value="IssueToProcess" AnchorOrigin=Origin.BottomCenter Margin="Margin.Dense" T="string" Label="To Process" Variant="Variant.Outlined" Clearable=true  Required RequiredError="Select to process...">
                                     <MudSelectItem Value="@("Tyrannosaur")" />
                                     <MudSelectItem Value="@("Triceratops")" />
                                     <MudSelectItem Value="@("Henon Rex")" />
                                 </MudSelect>
                    </MudItem>

                    <MudItem xs="12" sm="4">

                           <MudAutocomplete T="string" Label="Worker" SearchFunc="@Search1" ShowProgressIndicator="true"  Variant="Variant.Outlined"  Margin="Margin.Dense" Dense=true
                           AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Default" Required RequiredError="Please select article..."   ResetValueOnEmptyText=true >
                            <ProgressIndicatorTemplate>
                                <MudProgressLinear Size="Size.Small" Indeterminate="true" Color="Color.Error" />
                            </ProgressIndicatorTemplate>
                        </MudAutocomplete>
                    </MudItem>

                </MudGrid>
            </MudCardContent>
            <MudCardActions  Class="pb-4 justify-content-end">
                <MudLoadingButton @bind-Loading=@_LoadingIssue Disabled="@_LoadingIssue" StartIcon="@MudBlazor.Icons.Material.Filled.YoutubeSearchedFor" OnClick="GetIssuableArticles" Variant="Variant.Filled"
                                  Color="Color.Primary" Size="Size.Medium" Class=" font-weight-bold" >Show Issuable Articles </MudLoadingButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
     <MudItem xs="12">
                <MudCard Elevation="25">
                    <MudCardHeader>
                        <CardHeaderContent>
                                <MudText Typo="Typo.h5">Issuance Detail</MudText>
                                 <MudLoadingButton @bind-Loading="_LoadingIssue" ButtonVariant="MudExtensions.Enums.ButtonVariant.IconButton" Size="Size.Medium" 
                               Icon="@MudBlazor.Icons.Material.Filled.Refresh" Variant="Variant.Outlined" Color="Color.Primary"></MudLoadingButton>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                            <MudSimpleTable Hover="true"  FixedHeader="true" Style="height:400px">
                                <thead>
                                    <tr>
                                        @foreach (var h in headings)
                                    {
                                        <th>@h</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var row in rows)
                                {
                                    <tr>
                                        @foreach (var x in row.Split())
                                        {
                                            <td>@x</td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </MudSimpleTable>
                    </MudCardContent>
                  
                </MudCard>
            </MudItem>
</MudGrid>

     </MudTabPanel>
     

    </MudTabs>


<MudDialog @bind-IsVisible="visible" >
    <DialogContent>
        <MudText>Hi There, I'm an inline dialog!</MudText>
     
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Close">Close</MudButton>
    </DialogActions>
</MudDialog>
@code {
    bool _LoadingIssue { get; set; } = false;
    DateTime IssueDate = DateTime.Today;
    private bool visible;
    private bool nestedVisible;
    private string IssueFromProcess, IssueToProcess,IssueWorker;
    private void Open() => visible = true;
    private void Close() => visible = false;
    private void OpenNested() => nestedVisible = true;
    private void CloseNested() => nestedVisible = false;
        string[] headings = { "ID", "Name", "Email", "Gender", "IP Address" };
    string[] rows = {
        @"1 Krishna kpartner0@usatoday.com Male 28.25.250.202",
        @"2 Webb wstitle1@ning.com Male 237.168.134.114",
        @"3 Nathanil nneal2@cyberchimps.com Male 92.6.0.175",
        @"4 Adara alockwood3@patch.com Female 182.174.217.152",
        @"5 Cecilius cchaplin4@shinystat.com Male 195.124.144.18",
        @"6 Cicely cemerine9@soup.io Female 138.94.191.43",
    };
    void SaveReceive()
    {
        
    }
    void SaveIssuance()
    {
        
    }
    void GetIssuableArticles()
    {
        visible = true;
    }
    private bool resetValueOnEmptyText=true;
    private bool coerceText;
    private bool coerceValue;
    private string value1, value2="";
    private string[] states =
    {
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
        "Delaware", "District of Columbia", "Federated States of Micronesia",
        "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
        "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
        "Louisiana", "Maine", "Marshall Islands", "Maryland",
        "Massachusetts", "Michigan", "Minnesota", "Mississippi",
        "Missouri", "Montana", "Nebraska", "Nevada",
        "New Hampshire", "New Jersey", "New Mexico", "New York",
        "North Carolina", "North Dakota", "Northern Mariana Islands", "Ohio",
        "Oklahoma", "Oregon", "Palau", "Pennsylvania", "Puerto Rico",
        "Rhode Island", "South Carolina", "South Dakota", "Tennessee",
        "Texas", "Utah", "Vermont", "Virgin Island", "Virginia",
        "Washington", "West Virginia", "Wisconsin", "Wyoming",
    };

    private async Task<IEnumerable<string>> Search1(string value)
   {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return states;
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    public async Task<IEnumerable<string>> Search3(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // SQL Server connection string
        string connectionString = "YourConnectionStringHere";

        // Initialize an empty list to store results
        List<string> results = new List<string>();

        // If text is null or empty, return complete list
        if (string.IsNullOrEmpty(value))
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                // Open the connection
                connection.Open();

                // Define the SQL command
                SqlCommand command = new SqlCommand("SELECT Name FROM States", connection);

                // Execute the command
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    // Read each row and add the state name to the results list
                    while (reader.Read())
                    {
                        results.Add(reader.GetString(0)); // Assuming 'Name' is the first column
                    }
                }
            }
        }
        else
        {
            // If text is not null or empty, perform a search
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                // Open the connection
                connection.Open();

                // Define the SQL command with parameterized query to prevent SQL injection
                SqlCommand command = new SqlCommand("SELECT Name FROM States WHERE Name LIKE '%' + @value + '%'", connection);
                command.Parameters.AddWithValue("@value", value);

                // Execute the command
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    // Read each row and add the state name to the results list
                    while (reader.Read())
                    {
                        results.Add(reader.GetString(0)); // Assuming 'Name' is the first column
                    }
                }
            }
        }

        // Return the results
        return results;
    }

    private async Task<IEnumerable<string>> Search2(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
            return new string[0];
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}

